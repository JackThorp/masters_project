<script src="{{&serverURI}}/static/js/ethlightjs.min.js"></script>
<script src="{{&serverURI}}/static/js/api.js"></script>
<script>

var blockapps = require("blockapps-js");
var Promise = require("bluebird");

var contract = blockapps.Solidity.attach({{{contractDataString}}});
blockapps.query.serverURI = '{{{serverURI}}}';

var Units = blockapps.ethbase.Units;
var globalKeystore = {{{globalKeystoreString}}};
var developerKeystore = {{{developerKeystoreString}}};

{{{ txFailedHandlerCode }}}

function callFunc(funcName) {

    if (typeof ethlightjs === 'undefined') {
        ethlightjs = lightwallet;
    }

    var usableKeystore = ethlightjs.keystore.deserialize(JSON.stringify(globalKeystore));
    try {
        var privkey = usableKeystore.exportPrivateKey(
            walletaddress.value, '{{{globalPassword}}}');

        console.log("privkey: " + privkey);
    } catch (e) {
        {{{ txFailedHandlerName }}}(e);
//        $('#passwordModal').modal('show')
    }

    var args = [];
    var funcDivElts = document.getElementById(funcName + "Div").children;
    var len = funcDivElts.length;

    for (var i = 1; i < len-1; ++i) { // Skip the button and the value text input
        args.push(funcDivElts[i].value);
    }

    console.log("about to call function: " + funcName + " with args: " + args);
    console.log("eth value sent: " + Units.ethValue(funcDivElts[len-1].value).in("ether"));

    contract.state[funcName].apply(null,args).txParams({
        value : Units.ethValue(funcDivElts[len-1].value).in("ether")
    }).callFrom(privkey).then(afterTX).catch(function (err) { console.log("err: " + err); });
}

function storageAfterTX(result) {
    var afterTXstring = "TX returned: " +
        ((result === undefined) ? "(nothing)":result);

    return Promise.props(contract.state).then(function(sVars) {
        afterTXstring += "\n\n Contract storage state:\n\n";
        for (name in sVars) {
            var svar = sVars[name]
            if (typeof svar === "function") {
                continue;
            }
            afterTXstring += "  " + name + " = " + svar + "\n";
        };
      return afterTXstring;  
    });
} 

function contractBalanceAfterTX(txString) {
    return contract.account.balance.then(function(bal) {
        return txString + "\n Contract balance =  " +
            Units.convertEth(bal).from("wei").to("ether") + " ether\n";
    });
}

function userBalanceAfterTX(txString) {
    return blockapps.ethbase.Account(globalKeystore.addresses[0]).balance.then(function(userBal) {
        return txString + "\n Your balance     =  " +
            Units.convertEth(userBal).from("wei").to("ether") + " ether\n";
    });
}

function resetTextArea(txString)  {
    document.getElementById("afterTXarea").textContent = txString;
}

function afterTX(result) {
    storageAfterTX(result)
      .then(function (txStr) { 
          return contractBalanceAfterTX(txStr);
        })
      .then(function (txStr) { 
          return userBalanceAfterTX(txStr);
        })
      .then(function (txStr) { 
          resetTextArea(txStr);
      }).catch(function (err) {
          console.log("error caught: " + err); 
      });
} 
</script>
