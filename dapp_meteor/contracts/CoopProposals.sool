/********************************************************/
/********************************************************/

contract ContractProvider {
  function contracts(bytes32 name) returns (address addr) {}
}

/********************************************************/
/********************************************************/

contract CMCEnabled {
  // Base class for all system contracts

  address CMC;

  function setCMCAddress(address CMCAddr) returns (bool result){
    // Once the cmc address is set, don't allow it to be set again, except by the
    // doug contract itself.
    if(CMC != 0x0 && msg.sender != CMC){
      return false;
    }
    CMC = CMCAddr;
      return true;
  }

  function checkSender(address sender, bytes32 name) returns(bool) {
    return (CMC != 0x0 && sender == ContractProvider(CMC).contracts(name));
  }

  // Makes it so that CMC is the only contract that may kill it.
  function remove(){
    if(msg.sender == CMC){
      suicide(CMC);
    }
  }
}

/********************************************************/
/********************************************************/

contract MembershipRegistry {
  function isMember(address _user, address _coop) returns (bool);
  function totalMembers(address _coop) returns (uint);
}

/********************************************************/
/********************************************************/

contract CoopContract {
  function membershipFee() returns (uint f); 
  function quorum() returns (uint q);
  function normalRes() returns (uint nr);
}

/********************************************************/
/********************************************************/

contract CoopProposals is CMCEnabled {
  
  event motionPassed(uint mid);

  //enum rule {quorum, fee, normalRes, extraRes}

  struct ProposalVotes {
    bool passed;
    uint vAgainst;
    uint vFor;
    mapping(address => bool) voted;
  }

  /*
  // Ammendment to rules
  struct Ammendment {
    uint id;
    rule rule;
    uint value;
    ProposalVotes pVotes;
  }
*/
  // Ordinary Motion
  struct Motion {
    uint id;
    bytes32 ipfsHash;
    ProposalVotes pVotes;
  }
/*
  uint ammendmentCounter;
  mapping(uint => Ammendment) public proposedAmmendments;
*/
  uint public motionCounter;
  mapping(uint => Motion) proposedMotions;

  address coopAddress;

  function CoopProposals () {
    coopAddress = msg.sender;
    //ammendmentCounter = 0;
    motionCounter = 0;
  }

  function isAMember(address sender) returns (bool) {
    address memRegAddr = ContractProvider(CMC).contracts("MembershipRegistry");
    return MembershipRegistry(memRegAddr).isMember(msg.sender, coopAddress);
  }

  function getNumMembers() returns (uint) {
    address memRegAddr = ContractProvider(CMC).contracts("MembershipRegistry");
    return MembershipRegistry(memRegAddr).totalMembers(coopAddress);
  }

  function proposeMotion (bytes32 _ipfsHash) returns (uint _mId) {

    if(!isAMember(msg.sender)) {
      return;
    }

    uint mId                  = motionCounter++;
    proposedMotions[mId]          = Motion({
      id: mId, 
      ipfsHash: _ipfsHash, 
      pVotes: ProposalVotes({passed: false, vAgainst: 0, vFor: 0})
    });

    return mId;
  }

  /*
  function supportMotion (uint mId, bool _vFor) returns (bool success) {

    if (!isAMember(msg.sender)) {
      return;
    }
    
    Motion motion = proposedMotions[mId];
    
    // Check valid ammendment
    if (motion.id == 0) {
      return;
    }

    // Check if they have already voted for motion.
    if (motion.pVotes.voted[msg.sender]) {
      return;
    }

    // Register the vote TODO (extract into shared function byref / byVal)
    if (_vFor) {
      motion.pVotes.vFor++;
    } else {
      motion.pVotes.vAgainst++;
    }

    motion.pVotes.voted[msg.sender] = true;

    CoopContract coopContract = CoopContract(coopAddress);
    uint quorum     = coopContract.quorum();
    uint normalRes  = coopContract.normalRes();
    uint numMembers = getNumMembers(); 
    uint totalVotes = motion.pVotes.vFor + motion.pVotes.vAgainst;

    var turnout = totalVotes / numMembers;
    if (turnout < (quorum / 100)) {
      return;
    }

    var result = motion.pVotes.vFor / totalVotes;
    if (result >= (normalRes / 100)) {
      motion.pVotes.passed = true;
      motionPassed(mId);
      return true;
    } 
    return false;
  }
  */
}
  /*
  function proposeAmmendment(uint _rule, uint _newValue) returns (uint aId) {

    if(!isAMember(msg.sender)) {
      return;
    }

    uint aId                  = ammendmentCounter++;
    ProposalVotes _pVotes     = ProposalVotes({passed: false, vAgainst: 0, vFor: 0});
    Ammendment newAmmendment  = Ammendment({
      id: aId, 
      rule: _rule, 
      value: _value, 
      pVotes: _pVotes
    });

    proposedAmmendments[aId] = newAmmendment;
    return aId;
  }

  function voteOnAmmendment(uint aId, bool _vFor) {

    // Check sender is coop member.
    if (!isAMember(msg.sender)) {
      return;
    }
    
    Ammendment ammendment = proposedAmmendments[aId];
    
    // Check valid ammendment
    if (ammendment.id == 0) {
      return;
    }

    // Check if they have already voted for ammendment.
    if (ammendment.pVotes.voted[msg.sender]) {
      return;
    }

    // Register the vote
    if (_vFor) {
      ammendment.pVotes.vFor++;
    } else {
      ammendment.pVotes.vAgainst++;
    }
    ammendment.pVotes.voted[msg.sender] = true;

    CoopContract coopContract = CoopContract(coopAddress);
    uint quorum     = coopContract.quorum();
    uint numMembers = numMembers(); 
    uint totalVotes = ammendment.pVotes.vFor + ammendment.pVotes.vAgainst;

    var turnout = totalVotes / numMembers;
    if (turnout < (quorum / 100)) {
      return;
    }

    var result = ammendment.pVotes.vFor / totalVotes;
    if (result >= (normalRes / 100)) {
      coopContract.setRule(ammendment.rule, ammendment.value);
      ammendmentPassed(aId);
      return true;
    } 
    return false;
    // remove proposal (will still be in the history??)
  }
*/