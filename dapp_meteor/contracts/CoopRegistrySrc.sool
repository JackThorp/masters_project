/*************************************************************************/
/* INTERFACES & ABSTRACT CLASSES */

//Interface for getting contracts from CMC
contract ContractProvider {
  function contracts(bytes32 name) returns (address addr) {}
}

contract CMCEnabled {
  // Base class for all system contracts

  address CMC;

  function setCMCAddress(address CMCAddr) returns (bool result){
    // Once the cmc address is set, don't allow it to be set again, except by the
    // doug contract itself.
    if(CMC != 0x0 && msg.sender != CMC){
      return false;
    }
    CMC = CMCAddr;
      return true;
  }

  function checkSender(address sender, bytes32 name) returns(bool) {
    return (CMC != 0x0 && sender == ContractProvider(CMC).contracts(name));
  }

  // Makes it so that CMC is the only contract that may kill it.
  function remove(){
    if(msg.sender == CMC){
      suicide(CMC);
    }
  }
}
/********************************************************/
/********************************************************/

contract MembershipRegistry {
  function isMember(address _user, address _coop) returns (bool);
  function totalMembers(address _coop) returns (uint);
}

/******************************************************************************/
contract CoopRegistry is CMCEnabled {
  
  // This contract acts as a registry DB for all the coops in the app. 
  
  event newRegistration(address _coop);

  // Mapping from coop ID to address
  address[] public coops;
  uint public numCoops;

  // Map allows efficient delete operation.
  mapping(address => uint) coopIndex;


  function addCoop(address _coop) returns (bool result) {

    var length = coops.push(_coop);
    coopIndex[_coop] = length - 1;
    numCoops += 1;
    newRegistration(_coop);
    return true;
  }

  function newCoop(bytes _ipfsDataHash, uint _membershipFee, uint _quorum, uint _nRes) returns (bool result) {

    address _coop = new CoopContract(_ipfsDataHash, _membershipFee, _quorum, _nRes);
    CoopContract(_coop).setCMCAddress(CMC);

    var length = coops.push(_coop);
    coopIndex[_coop] = length - 1;
    numCoops += 1;
    newRegistration(_coop);
    return true;
  }
  
  function removeCoop(address _coop) returns (bool result) {

    // Delete sets entry to zero. It does not remove element.
    uint index = coopIndex[_coop];
    delete coops[index];
    numCoops -= 1;
    return true;
  }

  // Was not compiling as constant by default. . .
  function getCoops() constant returns (address[] _coops) {
    return coops;
  }

  function isRegistered(address _coop) returns (bool ) {
    //TODO test this.
    return coopIndex[_coop] != 0;
  }

}